/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
// @ts-ignore
import * as THREE from "three";
import { useRef } from "react";
import { useGLTF } from "@react-three/drei";
// @ts-ignore
import { GLTF } from "three-stdlib";
import { useHitTest } from "@react-three/xr";
import type { XRHitTestResult } from "webxr";

type GLTFResult = GLTF & {
  nodes: {
    Torus: THREE.Mesh;
  };
  materials: {
    ["Material.001"]: THREE.MeshStandardMaterial;
  };
};

interface ReticleProps {
  setCurrentHitTestResult: (hitTest: XRHitTestResult | undefined) => void;
  currentHitTestResult: XRHitTestResult | undefined;
}

export default function Reticle(props: ReticleProps) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(
    "gltf/reticle/reticle.gltf"
  ) as GLTFResult;

  useHitTest((hitMatrix, hit) => {
    props.setCurrentHitTestResult(hit);
    hitMatrix.decompose(
      group.current.position,
      group.current.rotation,
      group.current.scale
    );
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        geometry={nodes.Torus.geometry}
        material={materials["Material.001"]}
        scale={0.71}
      />
    </group>
  );
}

useGLTF.preload("gltf/reticle/reticle.gltf");
